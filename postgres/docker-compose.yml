x-postgres-common:
  &postgres-common
  image: postgres:17.6-alpine3.22
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U user --dbname=postgres'
    interval: 10s
    timeout: 5s
    retries: 5

x-postgres_replica:
  &postgres_replica
  <<: *postgres-common
  ports:
    - 5432
  command: |
    bash -c "
    if ! [ -f /var/lib/postgresql/data/init.lck ]; then 
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=$${REPLICATION_SLOT?[ERROR] ENV VAR REPLICATION SLOT NOT SET} --host=pg-0 --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Creating lock...'
      touch /var/lib/postgresql/data/init.lck
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
    fi
    postgres
    # - c promote_trigger_file=''
    "
  # depends_on:
  #   - pg-0
  environment: &replica_environments
    PGUSER: ${PGUSER?[ERROR] PGUSER NOT SET}
    PGPASSWORD: ${PGPASSWORD?[ERROR] PGPASSWORD NOT SET}
    REPLICATION_SLOT: replication_slot


services:
  pg-0:
    <<: *postgres-common
    ports:
      - 5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER?[ERROR] POSTGRES_USER NOT SET}
      POSTGRES_DB: ${POSTGRES_DB?[ERROR] POSTGRES_DB NOT SET}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD?[ERROR] POSTGRES_PASSWORD NOT SET}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      PGUSER: ${PGUSER?[ERROR] PGUSER NOT SET}
      PGPASSWORD: ${PGPASSWORD?[ERROR] PGPASSWORD NOT SET}
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
      # -c synchronous_commit='*'
      # -c synchronous_standby_name='*'
      # -c wal_log_hint=on
    volumes:
      - ./00_init_primary.sh:/docker-entrypoint-initdb.d/00_init.sh
      - ${DATA_VOLUME?[ERROR] ENV VAR DATA_VOLUME NOT SET!}/postgres/primary/pgdata:/var/lib/postgresql/data

  pg-1:
    <<: *postgres_replica
    environment:
      <<: *replica_environments
      REPLICATION_SLOT: ${REPLICATION_SLOT_1?[ERROR] ENV VAR REPLICATION_SLOT_1 NOT SET}
    volumes:
      - ${DATA_VOLUME?[ERROR] ENV VAR DATA_VOLUME NOT SET!}/postgres/replica-1/pgdata:/var/lib/postgresql/data

  pg-2:
    <<: *postgres_replica
    environment:
      <<: *replica_environments
      REPLICATION_SLOT: ${REPLICATION_SLOT_2?[ERROR] ENV VAR REPLICATION_SLOT_2 NOT SET}
    volumes:
      - ${DATA_VOLUME?[ERROR] ENV VAR DATA_VOLUME NOT SET!}/postgres/replica-2/pgdata:/var/lib/postgresql/data

  pgpool:
    image: bitnami/pgpool:4.6.2
    ports: # Does not need to be exposed to host only apps on the same docker network
      - 5432
    environment:
      - PGPOOL_BACKEND_NODES=0:pg-0:5432:0,1:pg-1:5432:2,2:pg-2:5432:2
      - PGPOOL_SR_CHECK_USER=${PGUSER?[ERROR] PGUSER NOT SET}
      - PGPOOL_SR_CHECK_PASSWORD=${PGPASSWORD?[ERROR] PGPASSWORD NOT SET}
      - PGPOOL_ENABLE_LDAP=no
      - PGPOOL_POSTGRES_USERNAME=${POSTGRES_USER?[ERROR] POSTGRES_USER NOT SET} 
      - PGPOOL_POSTGRES_PASSWORD=${POSTGRES_PASSWORD?[ERROR] POSTGRES_PASSWORD NOT SET}
      - PGPOOL_ADMIN_USERNAME=${PGPOOL_ADMIN_USERNAME?[ERROR] PGPOOL_ADMIN_USERNAME NOT SET}
      - PGPOOL_ADMIN_PASSWORD=${PGPOOL_ADMIN_PASSWORD?[ERROR] PGPOOL_ADMIN_PASSWORD NOT SET}
      - PGPOOL_ENABLE_LOAD_BALANCING=yes
      # These features below are for debugging and should only be enable in non production
      # - PGPOOL_ENABLE_LOG_CONNECTIONS=yes
      # - PGPOOL_ENABLE_LOG_PER_NODE_STATEMENT=yes
      # - PGPOOL_ENABLE_LOG_HOSTNAME=yes
    healthcheck:
      test: ["CMD", "/opt/bitnami/scripts/pgpool/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5