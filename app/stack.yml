networks:
  enumverse_frontend_net:
    external: true
  enumverse_backend_net:
    external: true
  enumverse_pulsar_net:
    external: true
  enumverse_postgres_net:
    external: true
  enumverse_mongodb_net:
    external: true


x-deploy-replica-common:
  # deploy:
  &deploy-replica-common
  mode: replicated
  replicas: 2

x-deploy-cpu-common:
  # deploy: 
  &deploy-cpu-common
  resources:
    limits:
      cpus: "0.20"
      memory: 256M

x-runtime-common:
  # deploy: this should be inserted under the deploy section
  deploy: &deploy-runtime-common
    update_config:
      failure_action: rollback
      order: start-first
      delay: 10s
    rollback_config:
      parallelism: 1
      delay: 10s
      monitor: 10s
    restart_policy:
      condition: on-failure
      delay: 10s
      max_attempts: 5
      window: 60s

#===============================================================================
# Postgres common blocks
#===============================================================================

x-postgres-deploy-cpu:
  # deploy:
  &postgres-deploy-cpu
    resources: &compute-small
      limits:
        cpus: '0.50'
        memory: 1G
        # pids: 1
      reservations:
        memory: 128M

x-postgres-common:
  &postgres-common
  image: postgres:17.6-alpine3.22
  user: postgres
  deploy: 
    <<: *deploy-runtime-common
    resources:
      <<: *compute-small
  healthcheck:
    test: ["CMD-SHELL","pg_isready -U user --dbname=postgres"]
    interval: 10s
    timeout: 5s
    retries: 3
  networks: &postgres-networks
    - enumverse_postgres_net

x-postgres_replica:
  &postgres_replica
  <<: *postgres-common
  ports:
    - 5432
  depends_on:
    - pg0
  command: |
    bash -c "
    if ! [ -f /var/lib/postgresql/data/init.lck ]; then 
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=$${REPLICATION_SLOT?[ERROR] ENV VAR REPLICATION SLOT NOT SET} --host=pg0 --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Creating lock...'
      touch /var/lib/postgresql/data/init.lck
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
    fi
    postgres
    # - c promote_trigger_file=''
    "
  environment: &replica_environments
    PGUSER: ${PGUSER?[ERROR] PGUSER NOT SET}
    PGPASSWORD: ${PGPASSWORD?[ERROR] PGPASSWORD NOT SET}
    REPLICATION_SLOT: replication_slot



x-api-healthcheck:
  &api-healthcheck
  healthcheck:
     test: ["CMD", "curl", "--fail", "http://localhost:8080/actuator/health"]
     interval: 30s
     timeout: 10s
     retries: 5
     start_period: 20s

x-web-healthcheck:
  &web-healthcheck
  healthcheck:
     test: ["CMD", "curl", "--fail", "http://localhost"]
     interval: 30s
     timeout: 10s
     retries: 5
     start_period: 20s

x-pulsar-networks: &pulsar-common-network
  enumverse_pulsar_net

x-pulsar-common:
  &pulsar-common
  image: apachepulsar/pulsar:4.0.6
  networks:
  - *pulsar-common-network



services:
  web:
    image: nginx:latest
    <<: *web-healthcheck
    deploy:
      resources:
        limits:
          cpus: "0.20"
          memory: 256M
      mode: replicated
      replicas: 2
      update_config:
        failure_action: rollback
        order: start-first
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.webapp.rule=Host(`enumverse.dev`) ||  Host(`www.enumverse.dev`)"
        - "traefik.http.routers.webapp.entrypoints=websecure"
        - "traefik.http.routers.webapp.tls=true"
        - "traefik.http.services.webapp.loadbalancer.server.port=80"
        - "traefik.http.middlewares.mywwwredirect.redirectregex.regex=^https://www\\.(.*)"
        - "traefik.http.middlewares.mywwwredirect.redirectregex.replacement=https://$${1}"
        - "traefik.http.routers.webapp.middlewares=mywwwredirect"
        - "traefik.docker.network=enumverse_frontend_net"
    networks:
      - enumverse_frontend_net

###########################################################################################################
# IDM API
###########################################################################################################
  idm_api:
    image: ${IDM_API_IMAGE:?ERROR IDM_API_IMAGE NOT SET}
    deploy:
      # resources:
      #   limits:
      #     cpus: "0.50"
      #     memory: 1G
      mode: replicated
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 60s
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.idm_api.entrypoints=websecure"
        - "traefik.http.routers.idm_api.tls=true"
        - "traefik.http.routers.idm_api.rule=Host(`enumverse.dev`) && PathPrefix(`/identity/`)"
        # - "traefik.http.routers.idm_api.rule=Host(`enumverse.dev/identity`)"
        - "traefik.http.services.idm_api.loadbalancer.server.port=8080"
        # - "traefik.http.routers.idm_api.middlewares=idmstripprefix"
        # - "traefik.http.middlewares.idmstripprefix.stripprefix.prefixes=/identity"
        # - "traefik.http.routers.idm_api.middlewares=idmaddprefix"
        # - "traefik.http.middlewares.idmstripprefix.idmaddprefix.prefixes=/api/v2"
        - "traefik.http.routers.idm_api.middlewares=idmreplacepathregex"
        - "traefik.http.middlewares.idmreplacepathregex.replacepathregex.regex=^/identity/(.*)"
        - "traefik.http.middlewares.idmreplacepathregex.replacepathregex.replacement=^${IDM_API_PATH_PREFIX:?ERROR IDM_API_PATH_PREFIX NOT SET}/$$1"
    environment:
      - POSTGRES_DB_URL=jdbc:postgresql://${IDM_DB_HOST:?ERROR IDM_DB_HOST NOT SET}:${IDM_DB_PORT:?ERROR IDM_DB_PORT NOT SET}/${IDM_DB_DATABASE:?ERROR IDM_DB_DATABASE NOT SET}
      # - POSTGRES_DB_URL=${IDM_DB_URL:?ERROR IDM_DB_URL NOT SET}
      - POSTGRES_USERNAME=${IDM_DB_USERNAME:?ERROR IDM_DB_USERNAME NOT SET}
      - POSTGRES_PASSWORD=${IDM_DB_PASSWORD:?ERROR IDM_DB_PASSWORD NOT SET}
      - PULSAR_SERVICE_URL=${IDM_PULSAR_URL:?ERROR IDM_PULSAR_URL NOT SET}
      - PROFILE=${API_PROFILE:-prod}
      - KEYCLOAK_USERNAME=${IDM_KEYCLOAK_USERNAME:?ERROR IDM_KEYCLOAK_USERNAME NOT SET}
      - KEYCLOAK_PASSWORD=${IDM_KEYCLOAK_PASSWORD:?ERROR IDM_KEYCLOAK_PASSWORD NOT SET}
      - KEYCLOAK_REALM=${IDM_KEYCLOAK_REALM:?ERROR IDM_KEYCLOAK_REALM NOT SET}
      - KEYCLOAK_MASTER_REALM=${IDM_KEYCLOAK_MASTER_REALM:?ERROR IDM_KEYCLOAK_MASTER_REALM NOT SET}
      - KEYCLOAK_SERVER_URL=${IDM_KEYCLOAK_SERVER_URL:?ERROR IDM_KEYCLOAK_SERVER_URL NOT SET}
      - KEYCLOAK_BASE_CLIENT=${IDM_KEYCLOAK_BASE_CLIENT:?ERROR IDM_KEYCLOAK_BASE_CLIENT NOT SET}
      - CLIENT_ID=${IDM_KEYCLOAK_CLIENT_ID:?ERROR IDM_KEYCLOAK_CLIENT_ID NOT SET}
      - CLIENT_SECRET=${IDM_KEYCLOAK_CLIENT_SECRET:?ERROR IDM_KEYCLOAK_CLIENT_SECRET NOT SET}
      - SUPER_ADMIN_EMAIL=${IDM_SUPER_ADMIN_EMAIL:?ERROR IDM_SUPER_ADMIN_EMAIL NOT SET}
      - SUPER_ADMIN_PASSWORD=${IDM_SUPER_ADMIN_PASSWORD:?ERROR IDM_SUPER_ADMIN_PASSWORD NOT SET}
      - SUPER_ADMIN_FIRSTNAME=${IDM_SUPER_ADMIN_FIRSTNAME:?ERROR IDM_SUPER_ADMIN_FIRSTNAME NOT SET}
      - SUPER_ADMIN_LASTNAME=${IDM_SUPER_ADMIN_LASTNAME:?ERROR IDM_SUPER_ADMIN_LASTNAME NOT SET}
      - ENUM_BACKEND_BASE_URL=${IDM_ENUM_BACKEND_BASE_URL:?ERROR IDM_ENUM_BACKEND_BASE_URL IS NOT SET} 
      - SUPPORT_EMAIL=${IDM_SUPPORT_EMAIL:?ERROR IDM_SUPPORT_EMAIL NOT SET}
      - LOG_LEVEL=${IDM_LOG_LEVEL:-INFO}
      - ALLOWED_ORIGINS=${IDM_ALLOWED_ORIGINS:?ERROR IDM_ALLOWED_ORIGINS NOT SET}
    networks:
      - enumverse_frontend_net
      - enumverse_backend_net
      - enumverse_postgres_net


  api:
    # container_name: api
    image: nginx:latest
    # <<: *api-healthcheck
    deploy:
      resources:
        limits:
          cpus: "0.20"
          memory: 256M
      mode: replicated
      replicas: 2
      update_config:
        failure_action: rollback
        order: start-first
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.webapi.entrypoints=websecure"
        - "traefik.http.routers.webapi.rule=Host(`web.enumverse.dev`) && PathPrefix(`/api`)"
        - "traefik.http.routers.webapi.middlewares=myappstripprefix"
        - "traefik.http.middlewares.myappstripprefix.stripprefix.prefixes=/api"
        - "traefik.http.routers.webapi.tls=true"
        - "traefik.http.services.webapi.loadbalancer.server.port=80"
    networks:
      - enumverse_frontend_net
      - enumverse_backend_net
      
  pg0:
    <<: *postgres-common
    ports:
      - 5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER?[ERROR] POSTGRES_USER NOT SET}
      POSTGRES_DB: ${POSTGRES_DB?[ERROR] POSTGRES_DB NOT SET}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD?[ERROR] POSTGRES_PASSWORD NOT SET}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      PGUSER: ${PGUSER?[ERROR] PGUSER NOT SET}
      PGPASSWORD: ${PGPASSWORD?[ERROR] PGPASSWORD NOT SET}
      KC_DB_DATABASE: ${KC_DB_DATABASE:?ERROR KC_DB_DATABASE NOT SET}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD:?ERROR KC_DB_PASSWORD NOT SET}
      KC_DB_USERNAME: ${KC_DB_USERNAME:?ERROR KC_DB_USERNAME NOT SET}
      IDM_DB_DATABASE: ${IDM_DB_DATABASE:?ERROR IDM_DB_DATABASE NOT SET}
      IDM_DB_PASSWORD: ${IDM_DB_PASSWORD:?ERROR IDM_DB_PASSWORD NOT SET}
      IDM_DB_USERNAME: ${IDM_DB_USERNAME:?ERROR IDM_DB_USERNAME NOT SET}
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
      # -c synchronous_commit='*'
      # -c synchronous_standby_name='*'
      # -c wal_log_hint=on
    volumes:
      - ${CONF_VOLUME_PG:?[ERROR] CONF_VOLUME_PG NOT SET!}:/docker-entrypoint-initdb.d
      - ${DATA_VOLUME_PG?[ERROR] DATA_VOLUME_PG NOT SET!}/pg-0/pgdata:/var/lib/postgresql/data

  pg1:
    <<: *postgres_replica
    environment:
      <<: *replica_environments
      REPLICATION_SLOT: ${REPLICATION_SLOT_1?[ERROR] ENV VAR REPLICATION_SLOT_1 NOT SET}
    volumes:
      - ${DATA_VOLUME_PG?[ERROR] DATA_VOLUME_PG NOT SET!}/pg-1/pgdata:/var/lib/postgresql/data

  pg2:
    <<: *postgres_replica
    environment:
      <<: *replica_environments
      REPLICATION_SLOT: ${REPLICATION_SLOT_2?[ERROR] ENV VAR REPLICATION_SLOT_2 NOT SET}
    volumes:
      - ${DATA_VOLUME_PG?[ERROR] DATA_VOLUME_PG NOT SET!}/pg-2/pgdata:/var/lib/postgresql/data

  pgpool:
    image: pgpool/pgpool:4.0.23
    ports: # Does not need to be exposed to host only apps on the same docker network
      - :${PGPOOL_PARAMS_PORT:?[ERROR] PGPOOL_PARAMS_PORT NOT SET}
    environment:
      - TZ=Africa/Lagos
      - PGPOOL_PARAMS_BACKEND_HOSTNAME0=pg0
      - PGPOOL_PARAMS_BACKEND_HOSTNAME1=pg1
      - PGPOOL_PARAMS_BACKEND_HOSTNAME2=pg2
      - PGPOOL_PARAMS_BACKEND_PORT0=5432
      - PGPOOL_PARAMS_BACKEND_PORT1=5432
      - PGPOOL_PARAMS_BACKEND_PORT2=5432
      - PGPOOL_PARAMS_BACKEND_WEIGHT0=1
      - PGPOOL_PARAMS_BACKEND_WEIGHT1=1
      - PGPOOL_PARAMS_BACKEND_WEIGHT2=1
      # - PGPOOL_PARAMS_BACKEND_FLAG0=ALLOW_TO_FAILOVER
      # - PGPOOL_PARAMS_BACKEND_FLAG1=ALLOW_TO_FAILOVER
      # - PGPOOL_PARAMS_BACKEND_FLAG2=ALLOW_TO_FAILOVER
      - PGPOOL_PARAMS_SR_CHECK_PERIOD=10
      - PGPOOL_PARAMS_SR_CHECK_USER=${PGUSER?[ERROR] PGUSER NOT SET} 
      - PGPOOL_PARAMS_SR_CHECK_PASSWORD=${PGPASSWORD?[ERROR] PGPASSWORD NOT SET} 
      - PGPOOL_PARAMS_HEALTH_CHECK_PERIOD=10
      - PGPOOL_PARAMS_HEALTH_CHECK_USER=${POSTGRES_USER?[ERROR] POSTGRES_USER NOT SET} 
      - PGPOOL_PARAMS_PORT=${PGPOOL_PARAMS_PORT:?[ERROR] PGPOOL_PARAMS_PORT NOT SET} 
      - PGPOOL_ENABLE_POOL_PASSWD=true
      - PGPOOL_PASSWORD_ENCRYPTION_METHOD=scram-sha-256
      - PGPOOL_SKIP_PASSWORD_ENCRYPTION=false
      - PGPOOL_PCP_USER="${PGUSER:?ERROR PGUSER NOT SET}"
      - PGPOOL_PCP_PASSWORD="${PGPASSWORD:?ERROR PGPASSWORD NOT SET}"
      # Postgres 
      - POSTGRES_USERNAME=${POSTGRES_USER?[ERROR] POSTGRES_USER NOT SET} 
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?[ERROR] POSTGRES_PASSWORD NOT SET}
      # Keycloak Connection Details
      - KEYCLOAK_USERNAME=${KC_DB_USERNAME:?ERROR KC_DB_USERNAME NOT SET}
      - KEYCLOAK_PASSWORD=${KC_DB_PASSWORD:?ERROR KC_DB_PASSWORD NOT SET}
      - IDM_USERNAME=${IDM_DB_USERNAME:?ERROR IDM_DB_USERNAME NOT SET}
      - IDM_PASSWORD=${IDM_DB_PASSWORD:?ERROR IDM_DB_PASSWORD NOT SET}
      # - ${CONF_VOLUME_PGPOOL?ERROR CONF_VOLUME_PGPOOL NOT SET}:/docker-entrypoint-initdb.d
    networks:
      - enumverse_postgres_net
      - enumverse_backend_net
    depends_on:
      - pg0
      - pg1
      - pg2


  # Start zookeeper
  pulsar-zookeeper:
    <<: *pulsar-common
    deploy:
      # resources:
      #   limits:
      #     cpus: '0.25'
      #     memory: 1G
      update_config:
        failure_action: rollback
        order: start-first
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
    volumes:
      - ${DATA_VOLUME_PS:?ERROR DATA_VOLUME_PS NOT SET}/zookeeper:/pulsar/data/zookeeper
    environment:
      - metadataStoreUrl=zk:pulsar-zookeeper:2181
      - PULSAR_MEM=-Xms256m -Xmx256m -XX:MaxDirectMemorySize=256m
    command:
      - bash
      - -c 
      - |
        bin/apply-config-from-env.py conf/zookeeper.conf && \
        bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
        exec bin/pulsar zookeeper    
    healthcheck:
      test: ["CMD", "bin/pulsar-zookeeper-ruok.sh"]
      interval: 10s
      timeout: 5s
      retries: 30

  # Init cluster metadata
  pulsar-init:
    <<: *pulsar-common
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 3G
    command:
      - bash
      - -c 
      - |
        bin/pulsar initialize-cluster-metadata \
        --cluster cluster-a \
        --zookeeper pulsar-zookeeper:2181 \
        --configuration-store pulsar-zookeeper:2181 \
        --web-service-url http://broker:8080 \
        --broker-service-url pulsar://broker:6650
    depends_on:
      - pulsar-zookeeper

  # Start bookie
  pulsar-bookie:
    <<: *pulsar-common
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 1G
      update_config:
        failure_action: rollback
        order: start-first
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
    environment:
      - clusterName=cluster-a
      - zkServers=pulsar-zookeeper:2181
      - metadataServiceUri=metadata-store:zk:pulsar-zookeeper:2181
      # otherwise every time we run docker compose uo or down we fail to start due to Cookie
      # See: https://github.com/apache/bookkeeper/blob/405e72acf42bb1104296447ea8840d805094c787/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java#L57-68
      - advertisedAddress=bookie
      - BOOKIE_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      - pulsar-zookeeper
      - pulsar-init
    # Map the local directory to the container to avoid bookie startup failure due to insufficient container disks.
    volumes:
      - ${DATA_VOLUME_PS?ERROR DATA_VOLUME_PS NOT SET}/bookkeeper:/pulsar/data/bookkeeper
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf && exec bin/pulsar bookie"

  # Start broker
  pulsar-broker:
    <<: *pulsar-common
    networks: 
      - *pulsar-common-network
      - enumverse_backend_net
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 1G
      update_config:
        failure_action: rollback
        order: start-first
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
    hostname: pulsar-broker
    environment:
      - metadataStoreUrl=zk:pulsar-zookeeper:2181
      - zookeeperServers=pulsar-zookeeper:2181
      - clusterName=cluster-a
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=broker
      - advertisedListeners=external:pulsar://127.0.0.1:6650
      - PULSAR_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      - pulsar-zookeeper
      - pulsar-bookie
    ports:
      - ":6650"
      - ":8080"
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf && exec bin/pulsar broker"

###########################################################################
# MONGODB REPLICA SET
###########################################################################
  mg1:
    container_name: mg1
    image: ${MONGO_IMAGE:?ERROR MONGO_IMAGE NOT SET}
    ports:
      - :${MONGO_PORT:?ERROR MONGO_PORT NOT SET}
    volumes:
      - ${DATA_VOLUME_MG:?ERROR DATA_VOLUME_MG NOT SET}/mg1:/data/db
      - ${CONF_VOLUME_MG:?ERROR DATA_VOLUME_MG NOT SET}/keyfile.pem:/data/keyfile.pem
    environment:
      - TZ=Africa/Lagos
      - MONGO_PORT=${MONGO_PORT:?ERROR MONGO_PORT NOT SET}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME:?ERROR MONGO_INITDB_ROOT_USERNAME NOT SET}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD:?ERROR MONGO_INITDB_ROOT_PASSWORD NOT SET}
      - MONGO_DATABASE=${MONGO_DATABASE:?ERROR MONGO_DATABASE NOT SET}
      - MONGO_USERNAME=${MONGO_USERNAME:?ERROR MONGO_USERNAME NOT SET}
      - MONGO_PASSWORD=${MONGO_PASSWORD:?ERROR MONGO_PASSWORD NOT SET}
      - MONGO_REPLSET=${MONGO_REPLSET:?ERROR MONGO_REPLSET NOT SET}
      - DATABASE_URL=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/${MONGO_DATABASE}?authSource=admin
    networks:
      - enumverse_mongodb_net
    command: |
      mongod 
      --replSet ${MONGO_REPLSET} 
      --port ${MONGO_PORT}
      --keyFile /data/keyfile.pem

  mg2:
    container_name: mg2
    image: ${MONGO_IMAGE:?ERROR MONGO_IMAGE NOT SET}
    ports:
      - :${MONGO_PORT:?ERROR MONGO_PORT NOT SET}
    volumes:
      - ${DATA_VOLUME_MG:?ERROR DATA_VOLUME_MG NOT SET}/mg2:/data/db
      - ${CONF_VOLUME_MG:?ERROR DATA_VOLUME_MG NOT SET}/keyfile.pem:/data/keyfile.pem
    environment:
      - TZ=Africa/Lagos
      - MONGO_PORT=${MONGO_PORT:?ERROR MONGO_PORT NOT SET}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME:?ERROR MONGO_INITDB_ROOT_USERNAME NOT SET}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD:?ERROR MONGO_INITDB_ROOT_PASSWORD NOT SET}
      - MONGO_DATABASE=${MONGO_DATABASE:?ERROR MONGO_DATABASE NOT SET}
      - MONGO_USERNAME=${MONGO_USERNAME:?ERROR MONGO_USERNAME NOT SET}
      - MONGO_PASSWORD=${MONGO_PASSWORD:?ERROR MONGO_PASSWORD NOT SET}
      - MONGO_REPLSET=${MONGO_REPLSET:?ERROR MONGO_REPLSET NOT SET}
      - DATABASE_URL=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/${MONGO_DATABASE}?authSource=admin
    networks:
      - enumverse_mongodb_net
    command: |
      mongod 
      --replSet ${MONGO_REPLSET} 
      --port ${MONGO_PORT}
      --keyFile /data/keyfile.pem

  mg3:
    container_name: mg3
    image: ${MONGO_IMAGE:?ERROR MONGO_IMAGE NOT SET}
    ports:
      - :${MONGO_PORT:?ERROR MONGO_PORT NOT SET}
    volumes:
      - ${DATA_VOLUME_MG:?ERROR DATA_VOLUME_MG NOT SET}/mg3:/data/db
      - ${CONF_VOLUME_MG:?ERROR DATA_VOLUME_MG NOT SET}/keyfile.pem:/data/keyfile.pem
    environment:
      - TZ=Africa/Lagos
      - MONGO_PORT=${MONGO_PORT:?ERROR MONGO_PORT NOT SET}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME:?ERROR MONGO_INITDB_ROOT_USERNAME NOT SET}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD:?ERROR MONGO_INITDB_ROOT_PASSWORD NOT SET}
      - MONGO_DATABASE=${MONGO_DATABASE:?ERROR MONGO_DATABASE NOT SET}
      - MONGO_USERNAME=${MONGO_USERNAME:?ERROR MONGO_USERNAME NOT SET}
      - MONGO_PASSWORD=${MONGO_PASSWORD:?ERROR MONGO_PASSWORD NOT SET}
      - MONGO_REPLSET=${MONGO_REPLSET:?ERROR MONGO_REPLSET NOT SET}
      - DATABASE_URL=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/${MONGO_DATABASE}?authSource=admin
    networks:
      - enumverse_mongodb_net
    command: |
      mongod 
      --replSet ${MONGO_REPLSET} 
      --port ${MONGO_PORT}
      --keyFile /data/keyfile.pem

  mgsetup:
    image: ${MONGO_IMAGE:?ERROR MONGO_IMAGE NOT SET}
    volumes:
      - ${CONF_VOLUME_MG:?ERROR DATA_VOLUME_MG NOT SET}/00_init_mongodb.sh:/data/00_init_mongodb.sh
    environment:
      - TZ=Africa/Lagos
      - MONGO_PORT=${MONGO_PORT:?ERROR MONGO_PORT NOT SET}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME:?ERROR MONGO_INITDB_ROOT_USERNAME NOT SET}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD:?ERROR MONGO_INITDB_ROOT_PASSWORD NOT SET}
      - MONGO_DATABASE=${MONGO_DATABASE:?ERROR MONGO_DATABASE NOT SET}
      - MONGO_USERNAME=${MONGO_USERNAME:?ERROR MONGO_USERNAME NOT SET}
      - MONGO_PASSWORD=${MONGO_PASSWORD:?ERROR MONGO_PASSWORD NOT SET}
      - MONGO_REPLSET=${MONGO_REPLSET:?ERROR MONGO_REPLSET NOT SET}
    networks:
      - enumverse_mongodb_net
    entrypoint: ["/bin/bash", "/data/00_init_mongodb.sh"]
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 30s

  mgexpress:
    image: mongo-express:latest
    ports:
      - 8081:8081
    networks:
      - enumverse_mongodb_net
    environment:
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGOEXP_USERNAME:?ERROR MONGOEXP_USERNAME NOT SET}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGOEXP_PASSWORD:?ERROR MONGOEXP_PASSWORD NOT SET}
      - ME_CONFIG_MONGODB_URL=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mg1:${MONGO_PORT},mg2:${MONGO_PORT},mg3:${MONGO_PORT}/?replicaSet=${MONGO_REPLSET}&readPreference=primaryPreferred
    depends_on:
      - mg1

###########################################################################################################
# KEYCLOAK
###########################################################################################################
  keycloak:
    image: semicolon/keycloak:26.3.1-0
    ports:
      - :8443
      - :8080
      - :9000
    environment:
      - TZ=Africa/Lagos
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KC_BOOTSTRAP_ADMIN_USERNAME:?ERROR ENV KC_BOOTSTRAP_ADMIN_USERNAME NOT SET}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KC_BOOTSTRAP_ADMIN_PASSWORD:?ERROR ENV KC_BOOTSTRAP_ADMIN_PASSWORD NOT SET}
      - KC_DB_URL_HOST=${KC_DB_HOST:?ERROR KC_DB_HOST NOT SET}
      - KC_DB_URL_PORT=${KC_DB_PORT:?ERROR KC_DB_PORT NOT SET}
      - KC_DB_URL_DATABASE=${KC_DB_DATABASE:?ERROR KC_DB_DATABASE NOT SET}
      - KC_DB_USERNAME=${KC_DB_USERNAME:?ERROR KC_DB_USERNAME NOT SET}
      - KC_DB_PASSWORD=${KC_DB_PASSWORD:?ERROR KC_DB_PASSWORD NOT SET}
      - KC_PROXY_ADDRESS_FORWARDING=true
      - KC_PROXY_HEADERS=xforwarded
      # - KC_HOSTNAME_STRICT=false
      # - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HOSTNAME=${KC_HOSTNAME:?ERROR KC_HOSTNAME NOT SET}
      - KC_HOSTNAME_BACKCHANNEL_DYNAMIC=false
      - KC_HTTP_ENABLED=true
    volumes:
      - ${DATA_VOLUME_KC:?ERROR DATA_VOLUME_KC NOT SET}/data:/opt/keycloak/data
      - ${CONF_VOLUME_KC:?ERROR CONF_VOLUME_KC NOT SET}/enumverse-realm-export.json:/opt/keycloak/data/import/enumverse-realm-export.json
    command: start --optimized --verbose --import-realm  # --hostname https://idm.enumverse.dev --http-enabled true  --hostname-backchannel-dynamic true --proxy-headers xforwarded 
    # healthcheck:
    #   test: ["CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e \"GET /health/ready HTTP/1.1\r\nhost: http://localhost\r\nConnection: close\r\n\r\n\" >&3;grep \"HTTP/1.1 200 OK\" <&3"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5
    #   start_period: 30s
    networks:
      - enumverse_postgres_net
      - enumverse_frontend_net
    deploy:
      # resources:
      #   limits:
      #     cpus: "0.20"
      #     memory: 256M
      mode: replicated
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.keycloak.rule=Host(`${KC_DOMAIN:?ERROR KC_DOMAIN NOT SET}`)"
      - "traefik.http.routers.keycloak.entrypoints=websecure"
      - "traefik.http.routers.keycloak.tls=true"
      - "traefik.http.services.keycloak.loadbalancer.server.port=${KC_HTTP_PORT:?ERROR KC_HTTP_PORT NOT SET}"
      - "traefik.docker.network=enumverse_frontend_net"