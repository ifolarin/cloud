
x-deploy-replica-common:
  # deploy:
  &deploy-replica-common
  mode: replicated
  replicas: 2

x-deploy-cpu-common:
  # deploy: 
  &deploy-cpu-common
  resources:
    limits:
      cpus: "0.20"
      memory: 256M
      # pids: 1

x-runtime-common:
  # deploy: this should be inserted under the deploy section
  &deploy-runtime-common
    update_config:
      failure_action: rollback
      order: start-first
      delay: 10s
    rollback_config:
      parallelism: 1
      delay: 10s
      monitor: 10s
    restart_policy:
      condition: on-failure
      delay: 10s
      max_attempts: 5
      window: 60s

x-postgres-deploy-cpu:
  # deploy:
  &postgres-deploy-cpu
    resources:
      limits:
        cpus: '0.50'
        memory: 1G
        # pids: 1
      reservations:
        memory: 128M

x-postgres-common:
  &postgres-common
  image: postgres:17.6-alpine3.22
  # image: postgres:17.5
  user: user
  # restart: unless-stopped
  # shm_size: 128mb
  healthcheck:
    test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER?ERROR ENV POSTGRES_USER NOT SET} --dbname=${POSTGRES_DB:?ERROR ENV POSTGRES_DB NOT SET}"]
    interval: 10s
    timeout: 5s
    retries: 5
  networks:
    - enumverse_backend

x-api-healthcheck:
  &api-healthcheck
  healthcheck:
     test: ["CMD", "curl", "--fail", "http://localhost:8080/actuator/health"]
     interval: 30s
     timeout: 10s
     retries: 5
     start_period: 20s

x-pulsar-common:
  &pulsar-common
  image: apachepulsar/pulsar:4.0.6


networks:
  enumverse_frontend:
    external: true
  enumverse_backend:
    external: true
  enumverse_pulsar:
    external: true

services:
  web:
    # container_name: web
    image: nginx:latest
    deploy:
      resources:
        limits:
          cpus: "0.20"
          memory: 256M
      mode: replicated
      replicas: 2
      update_config:
        failure_action: rollback
        order: start-first
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s

    networks:
      - enumverse_frontend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web-app.rule=Host(`enumverse.local`)"
      - "traefik.http.routers.web-app.entrypoints=websecure"

  api:
    # container_name: api
    image: nginx:latest
    deploy:
      resources:
        limits:
          cpus: "0.20"
          memory: 256M
      mode: replicated
      replicas: 2
      update_config:
        failure_action: rollback
        order: start-first
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
    networks:
      - enumverse_frontend
      - enumverse_backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web-api.entrypoints=websecure"
      - "traefik.http.routers.web-api.rule=Host(`enumverse.local`) && PathPrefix(`/api`)"
      - "traefik.http.routers.web-api.middlewares=my-app-stripprefix"
      - "traefik.http.middlewares.my-app-stripprefix.stripprefix.prefixes=/api"
      - "traefik.http.services.web-api.loadbalancer.server.port=80"
    # restart: unless-stopped

  postgres_primary:
    <<: *postgres-common
    user: ${UID}:${GID}
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
        reservations:
          memory: 128M
      mode: replicated
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
      # ports:
      #   - 5432:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER?ERROR ENV POSTGRES_USER NOT SET}
      POSTGRES_DB: ${POSTGRES_DB?ERROR ENV POSTGRES_DB NOT SET}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD?ERROR ENV POSTGRES_PASSWORD NOT SET}
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      PGUSER: ${PGUSER?ERROR ENV PGUSER NOT SET}
      PGPASSWORD: "${PGPASSWORD?ERROR ENV PGPASSWORD NOT SET}"
      KC_DB_NAME: ${KC_DB_NAME?ERROR ENV KC_DB_NAME NOT SET}
      KC_DB_USERNAME: ${KC_DB_USERNAME?ERROR ENV KC_DB_USERNAME NOT SET}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD?ERROR ENV KC_DB_PASSWORD NOT SET}
      TZ: "Africa/Lagos"
    command: |
      postgres 
      -c wal_level=replica 
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
    volumes:
      - ${DATA_VOLUME?ERROR ENV DATA_VOLUME NOT SET}/util/postgres/primary/00_init_primary.sql:/docker-entrypoint-initdb.d/00_init.sql
      - ${DATA_VOLUME?ERROR ENV DATA_VOLUME NOT SET}/util/keycloak/init-keycloak-db.sh:/docker-entrypoint-initdb.d/01_init_keycloak_db.sh
      - ${DATA_VOLUME?ERROR ENV DATA_VOLUME NOT SET}/data/postgres/primary:/var/lib/postgresql/data

  postgres_replica:
    <<: *postgres-common
    deploy:
      resources:
        limits:
          cpus: "0.20"
          memory: 256M
      mode: replicated
      replicas: 1
      update_config:
        failure_action: rollback
        order: start-first
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s
    # ports:
    #   - 5433:5432
    environment:
      PGUSER: ${PGUSER?ERROR ENV PGUSER NOT SET}
      PGPASSWORD: ${PGPASSWORD?ERROR ENV PGPASSWORD NOT SET}
      TZ: "Africa/Lagos"
    volumes:
      - ${DATA_VOLUME?ERROR ENV DATA_VOLUME NOT SET}/data/postgres/replica:/var/lib/postgresql/data
    command: |
      bash -c "
      if [ ! -d '/var/lib/postgresql/data' ]; then 
        until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=5432
        do
        echo 'Waiting for primary to connect...'
        sleep 1s
        done
        echo 'Backup done, starting replica...'
        chmod 0700 /var/lib/postgresql/data
      fi
      postgres
      "
    depends_on:
      - postgres_primary
        # condition: service_healthy

  keycloak:
    image: semicolon/keycloak:26.3.1-0
    deploy:
      <<: *deploy-runtime-common
    ports:
      - 8280:8443
      - 8082:8080
      - 9000:9000
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KC_BOOTSTRAP_ADMIN_USERNAME?ERROR ENV KC_BOOTSTRAP_ADMIN_USERNAME NOT SET}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KC_BOOTSTRAP_ADMIN_PASSWORD?ERROR ENV KC_BOOTSTRAP_ADMIN_PASSWORD NOT SET}
      # - KC_DB_URL_HOST=${POSTGRES_HOST?ERROR ENV POSTGRES_HOST NOT SET}
      - KC_DB_URL=jdbc:postgresql://${POSTGRES_HOST?ERROR ENV POSTGRES_HOST NOT SET}:${POSTGRES_PORT?:ERROR ENV POSTGRES_PORT NOT SET}/${KC_DB_NAME?:ERROR ENV KC_DB_NAME NOT SET}
      - KC_DB_USERNAME=${KC_DB_USERNAME?ERROR ENV KC_DB_USERNAME NOT SET}
      - KC_DB_PASSWORD=${KC_DB_PASSWORD?ERROR ENV KC_DB_PASSWORD NOT SET}
    volumes:
      - ${DATA_VOLUME?ERROR ENV DATA_VOLUME NOT SET}/data/keycloak/kcdata:/opt/keycloak/data
      - ${DATA_VOLUME?ERROR ENV DATA_VOLUME NOT SET}/util/keycloak/enumverse-realm-export.json:/opt/keycloak/data/import/enumverse-realm.json
    command: start --import-realm --optimized --http-enabled true --hostname ${KC_HOSTNAME?ERROR ENV KC_HOSTNAME NOT SET} --hostname-backchannel-dynamic true --proxy-headers xforwarded
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:9000/health/live"]
      # interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    networks:
      - enumverse_frontend
      - enumverse_backend
    depends_on:
      - "postgres_primary"
        # condition: service_healthy

  # Start zookeeper
  zookeeper:
    <<: *pulsar-common
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 1G
      update_config:
        failure_action: rollback
        order: start-first
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s


    networks:
      - enumverse_pulsar
    volumes:
      - ${DATA_VOLUME?ERROR ENV DATA_VOLUME NOT SET}/pulsar/zookeeper:/pulsar/data/zookeeper
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - PULSAR_MEM=-Xms256m -Xmx256m -XX:MaxDirectMemorySize=256m
    command:
      - bash
      - -c 
      - |
        bin/apply-config-from-env.py conf/zookeeper.conf && \
        bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
        exec bin/pulsar zookeeper    
    healthcheck:
      test: ["CMD", "bin/pulsar-zookeeper-ruok.sh"]
      interval: 10s
      timeout: 5s
      retries: 30

  # Init cluster metadata
  pulsar-init:
    <<: *pulsar-common
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 3G
    networks:
      - enumverse_pulsar
    command:
      - bash
      - -c 
      - |
        bin/pulsar initialize-cluster-metadata \
        --cluster cluster-a \
        --zookeeper zookeeper:2181 \
        --configuration-store zookeeper:2181 \
        --web-service-url http://broker:8080 \
        --broker-service-url pulsar://broker:6650
    depends_on:
      - zookeeper
       

  # Start bookie
  bookie:
    <<: *pulsar-common
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 1G
      update_config:
        failure_action: rollback
        order: start-first
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s

    networks:
      - enumverse_pulsar
    environment:
      - clusterName=cluster-a
      - zkServers=zookeeper:2181
      - metadataServiceUri=metadata-store:zk:zookeeper:2181
      # otherwise every time we run docker compose uo or down we fail to start due to Cookie
      # See: https://github.com/apache/bookkeeper/blob/405e72acf42bb1104296447ea8840d805094c787/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java#L57-68
      - advertisedAddress=bookie
      - BOOKIE_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      - zookeeper
      - pulsar-init
    # Map the local directory to the container to avoid bookie startup failure due to insufficient container disks.
    volumes:
      - ${DATA_VOLUME?ERROR ENV DATA_VOLUME NOT SET}/data/pulsar/bookkeeper:/pulsar/data/bookkeeper
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf && exec bin/pulsar bookie"

  # Start broker
  broker:
    <<: *pulsar-common
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 1G
      update_config:
        failure_action: rollback
        order: start-first
        delay: 10s
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 10s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 60s

    hostname: broker
    networks:
      - enumverse_pulsar
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - zookeeperServers=zookeeper:2181
      - clusterName=cluster-a
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=broker
      - advertisedListeners=external:pulsar://127.0.0.1:6650
      - PULSAR_MEM=-Xms512m -Xmx512m -XX:MaxDirectMemorySize=256m
    depends_on:
      - zookeeper
      - bookie
    ports:
      - "6650:6650"
      - "8080:8080"
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf && exec bin/pulsar broker"

